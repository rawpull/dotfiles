
setopt PROMPT_SUBST
setopt autocd
source $HOME/.profile.zsh
source $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
repos="$HOME/repos"
venv=".venv"
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PATH="$HOME/.poetry/bin:$PATH"
export EDITOR="nvim"
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#3ae6ca,underline"

alias zreload="ln -f $HOME/repos/dotfiles/zsh/zshrc $HOME/.zshrc && source ~/.zshrc"
alias zedit="${EDITOR} ~/.zshrc"
alias python="python3"
alias pip="pip3"
alias c='clear'
alias cc='code .'
alias ccreload='ln -f vscode_settings.json $HOME/Library/Application\ Support/Code/User/settings.json'
alias f='open -a Finder .'
alias fo='open -a Finder'
alias ff='open -a ForkLift .'
alias ffo='open -a ForkLift'
alias to='touch'
alias ls='gls --group-directories-first --time-style=+"%d.%m.%Y %H:%M" --color=auto -F'
alias ll='gls -lah --group-directories-first --time-style=+"%d.%m.%Y %H:%M" --color=auto -F'
alias l='ll'
alias la='gls -ah --group-directories-first --time-style=+"%d.%m.%Y %H:%M" --color=auto -F'
alias -- +x="chmod +x"
alias cp='cp -i'
alias -- -='cd -'
alias ..='cd ..'
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias repos="cd $repos"
alias vim="nvim"
alias vi="nvim"
alias v="nvim"
alias ga="git add"
alias grm="git rm"
alias ver="rm -rf .venv"
alias brewi="brew install"
alias brewr="brew uninstall"
alias brews="brew search"
alias local-ip="ipconfig getifaddr en0"
alias ip="curl ipinfo.io/ip"
alias dk='docker'
alias dcu='docker compose up -d'
alias dcd='docker compose down'
red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput setaf 9`



g(){
   if [[ $# -gt 0 ]]; then
      git "$@"
   else
      git status
   fi
}


more(){
   file=$1
   if [ -z $1 ]; then
      echo "${red}Parameter required${reset}\n'more .zshrc'"
      return
   fi

   if [ ! -f $1 ];then;echo "${red}File not exist.${reset}";return;fi

   if [[ -x $file ]]; then; executable="${green}yes${reset}"
      else ; executable="${red}no${reset}"
   fi

   echo "
    ${green}*${reset}NAME:            $file
    ${green}*${reset}CREATION DATE:   $(gstat -c %y $file| sed 's/^\([0-9\-]*\).*/\1/')
    ${green}*${reset}PERMISSIONS:     $(gstat -c %a $file)
    ${green}*${reset}SIZE:            $(numfmt --to=iec-i --suffix=B --format="%.3f" $(gstat --printf="%s" $file))
    ${green}*${reset}EXECUTABLE:      ${executable}
    ${green}*${reset}ENCODING:        $(file -bi $file)
    "
}

take() { mkdir -p $@ ; cd $@ }
port() { lsof -i :$1 }

graph() {
   if [[ -n $2 && "$2"="detail" ]]; then
      [[ -n $1 && -z $2 ]] && $arg=$1
      git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --[[ -z $1 ]] && $1
   else
      git log --decorate --oneline --graph --$1
   fi
   }

clone() {
   repo_dir=$(echo $1 | awk -F'[/:]+' '{ sub("^www\.", "", $2); print $4 }' | awk -F'.' '{print $1}' | tr -d '\r' )
   git clone $1 $repos/$repo_dir ; cd $repos/$repo_dir
}


vea() {
   local venvpath="bin/activate"
   if [ "$#" -eq 0 ]; then
      if [ -f $PWD/pyproject.toml ]; then
         echo "venv:poetry"
         export VENV="poetry";poetry shell
      elif [ -f $PWD/Pipfile ]; then
         echo "venv:pipenv"
         export VENV="pipenv";pipenv shell
      elif [ -f $venv/$venvpath ]; then
         echo "venv:venv"
         export VENV="virtualenv";source $venv/$venvpath
      fi
   fi
}


vec() {
   if [ "$#" -eq 0 ]; then
      echo "Args:\n \tpo – poetry\n\tpi – pipenv\n\tv – virtualenv (args: name, alt)"
   elif [ $1 = "po" ]; then
      poetry init
   elif [ $1 = "pi" ]; then
      pipenv shell
   elif [ $1 = 'v' ]; then
      local env=$([[ -n $2 ]] && echo $2 || echo $venv)
      virtualenv $([[ $3 = 'alt' ]] && --no-site-packages) $env
   fi
}

ved() {
   if [ $VENV = "poetry" ] || [ $VENV = "pipenv" ]; then
      exit; unset VENV
   elif [ $VENV = "virtualenv" ]; then
      deactivate; unset VENV
   else
      echo "nothing";
   fi
}

dexec() {
   name=$1
   id=$(docker ps | grep ${name} | awk '{print $1}')
   docker exec -it $id /bin/bash
}


dps() {
   if [[ $1 = "w" ]];then
      while true;do
      clear
      docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
      sleep 3
      done
   else
      docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
   fi
}

extract () {
    if [ -f "$1" ]; then
        case "$1" in
            *.dmg)   hdiutil mount "$1"                ;;
            *.tar)   tar -xvf "$1"                     ;;
            *.zip)   unzip "$1"                        ;;
            *.ZIP)   unzip "$1"                        ;;
            *.pax)   pax -r < "$1"                     ;;
            *.pax.Z) uncompress "$1" --stdout | pax -r ;;
            *.7z)    7z x "$1"                         ;;
            *.xar)   xar -xvf "$1"                     ;;
            *.pkg)   xar -xvf "$1"                     ;;
            *)       tar -axvf "$1"                    ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

export PATH="/usr/local/opt/python@3.7/bin:$PATH"
